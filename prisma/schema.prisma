generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  avatar        String?        // URL to the S3-stored avatar
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  whiteboards   Whiteboard[]
  collaborators Collaborator[]
  accounts      Account[]
  sessions      Session[]
}

model Whiteboard {
  id            String         @id @default(cuid())
  title         String
  content       String         @db.LongText
  isPublic      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborators Collaborator[]

  @@index([userId])
}

model Collaborator {
  id           String     @id @default(cuid())
  whiteboardId String
  userId       String
  canEdit      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  whiteboard   Whiteboard @relation(fields: [whiteboardId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([whiteboardId, userId])
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Otp {
  id        String   @id @default(cuid())
  identifier String   @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

